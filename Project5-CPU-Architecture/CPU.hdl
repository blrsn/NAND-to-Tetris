// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Destination bits

    And( a=instruction[15], b=true, out=Cinstruction );
    Not( in=Cinstruction, out=Ainstruction );
    Or( a=Ainstruction, b=instruction[5], out=destA );

    And( a=Cinstruction, b=instruction[3], out=destM );
    And( a=Cinstruction, b=instruction[4], out=destD );

    // Loading A register

    Mux16( a=instruction, b=ALUout, sel=instruction[15], out=ARegIn );
    Register( in=ARegIn, load=destA, out=Aregister);

    Mux16( a=Aregister, b=inM, sel=instruction[12] , out=ALUin ); // A or M is selected as ALU input depending on in[12]

    // Loading D Register
    Register( in=ALUout , load=destD, out=Dregister);

    // ALU
    ALU( x=Dregister, y=ALUin, zx=instruction[11], nx=instruction[10], zy=instruction[9] ,ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, zr=zr, ng=ng );

    // Start Jump logic

    And( a=instruction[0], b=true, out=GreaterThanBit );
    And( a=instruction[1], b=true, out=EqualToBit );
    And( a=instruction[2], b=true, out=LessThanBit );

    Not( in=ng, out=notng );
    Not( in=zr, out=notzr );
    And( a=notng, b=notzr, out=ps );

    And( a=GreaterThanBit, b=ps, out=jump1 );
    And( a=EqualToBit, b=zr, out=jump2 );
    And( a=LessThanBit, b=ng, out=jump3 );

    Or(a=jump1,b=jump2,out=temp);
    Or(a=jump3,b=temp,out=jumper);
    And(a=jumper,b=Cinstruction,out=jump);

    // End Jump Logic

    //Program Counter
    // Need to compute load logic
    PC( in=Aregister, load=jump ,inc=true ,reset=reset, out[0..14]=pc, out[1]=true );

    And16( a=true, b=Aregister, out[0..14]=addressM );
    And16( a=true, b=ALUout, out=outM );
    And( a=true, b=destM, out=writeM );
}
